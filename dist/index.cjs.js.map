{"version":3,"file":"index.cjs.js","sources":["../src/service/AzureResourceGraphQuery.ts","../src/service/router.ts","../src/plugin.ts"],"sourcesContent":["import { ResourceGraphClient } from '@azure/arm-resourcegraph';\nimport { ClientSecretCredential } from '@azure/identity';\n\nexport class AzureResourceGraphQuery {\n  private client: ResourceGraphClient;\n\n  constructor(tenantId: string, clientId: string, clientSecret: string) {\n    const credentials = new ClientSecretCredential(\n      tenantId,\n      clientId,\n      clientSecret,\n    );\n    this.client = new ResourceGraphClient(credentials);\n  }\n\n  async queryResourcesByTag(\n    subscriptionId: string,\n    tagKey: string,\n    tagValue: string,\n  ) {\n    const query = `Resources\n      | where tags['${tagKey}'] == '${tagValue}'`;\n\n    const result = await this.client.resources({\n      subscriptions: [subscriptionId],\n      query: query,\n    });\n\n    return result.data;\n  }\n}\n","import { MiddlewareFactory } from '@backstage/backend-defaults/rootHttpRouter';\nimport { LoggerService } from '@backstage/backend-plugin-api';\nimport { Config } from '@backstage/config';\nimport express from 'express';\nimport Router from 'express-promise-router';\nimport { AzureResourceGraphQuery } from './AzureResourceGraphQuery';\n\nexport interface RouterOptions {\n  logger: LoggerService;\n  config: Config;\n}\n\nexport async function createRouter(\n  options: RouterOptions,\n): Promise<express.Router> {\n  const { logger, config } = options;\n\n  const router = Router();\n  router.use(express.json());\n\n  // Health check endpoint\n  router.get('/health', (_, response) => {\n    logger.info('PONG!');\n    response.json({ status: 'ok' });\n  });\n\n  // Azure configuration\n  const subscriptionId = config.getString('azure.subscriptionId');\n  const tenantId = config.getString('azure.tenantId');\n  const clientId = config.getString('azure.clientId');\n  const clientSecret = config.getString('azure.clientSecret');\n\n  const azureResourceGraphQuery = new AzureResourceGraphQuery(\n    tenantId,\n    clientId,\n    clientSecret,\n  );\n\n  // Azure resources endpoint\n  router.get('/resources', async (req, res) => {\n    const { tagKey, tagValue } = req.query;\n\n    try {\n      const resources = await azureResourceGraphQuery.queryResourcesByTag(\n        subscriptionId,\n        tagKey as string,\n        tagValue as string,\n      );\n      res.json(resources);\n    } catch (error) {\n      if (error instanceof Error) {\n        logger.error(`Failed to fetch Azure resources: ${error.message}`);\n        res.status(500).json({ error: error.message });\n      } else {\n        logger.error(\n          'An unknown error occurred while fetching Azure resources.',\n        );\n        res\n          .status(500)\n          .json({\n            error: 'An unknown error occurred while fetching Azure resources.',\n          });\n      }\n    }\n  });\n\n  // Middleware\n  const middleware = MiddlewareFactory.create({ logger, config });\n  router.use(middleware.error());\n\n  return router;\n}\n","import {\n  coreServices,\n  createBackendPlugin,\n} from '@backstage/backend-plugin-api';\nimport { createRouter } from './service/router';\n\n/**\n * azurePlugin backend plugin\n *\n * @public\n */\nexport const azurePlugin = createBackendPlugin({\n  pluginId: 'azure',\n  register(env) {\n    env.registerInit({\n      deps: {\n        httpRouter: coreServices.httpRouter,\n        logger: coreServices.logger,\n        config: coreServices.rootConfig,\n      },\n      async init({ httpRouter, logger, config }) {\n        const router = await createRouter({\n          logger,\n          config,\n        });\n\n        httpRouter.use(router);\n\n        httpRouter.addAuthPolicy({\n          path: '/api/azure/resources',\n          allow: 'unauthenticated',\n        });\n\n        httpRouter.addAuthPolicy({\n          path: '/api/azure/health',\n          allow: 'unauthenticated',\n        });\n      },\n    });\n  },\n});\n"],"names":["ClientSecretCredential","ResourceGraphClient","Router","express","MiddlewareFactory","createBackendPlugin","coreServices"],"mappings":"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"}